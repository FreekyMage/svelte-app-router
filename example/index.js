var Example = (function () {
'use strict';

function noop() {}

function assign(target) {
	var k,
		source,
		i = 1,
		len = arguments.length;
	for (; i < len; i++) {
		source = arguments[i];
		for (k in source) target[k] = source[k];
	}

	return target;
}

function appendNode(node, target) {
	target.appendChild(node);
}

function insertNode(node, target, anchor) {
	target.insertBefore(node, anchor);
}

function detachNode(node) {
	node.parentNode.removeChild(node);
}

function reinsertBetween(before, after, target) {
	while (before.nextSibling && before.nextSibling !== after) {
		target.appendChild(before.parentNode.removeChild(before.nextSibling));
	}
}

function createFragment() {
	return document.createDocumentFragment();
}

function createElement(name) {
	return document.createElement(name);
}

function createText(data) {
	return document.createTextNode(data);
}

function createComment() {
	return document.createComment('');
}

function blankObject() {
	return Object.create(null);
}

function destroy(detach) {
	this.destroy = noop;
	this.fire('destroy');
	this.set = this.get = noop;

	if (detach !== false) this._fragment.u();
	this._fragment.d();
	this._fragment = this._state = null;
}

function differs(a, b) {
	return a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function dispatchObservers(component, group, changed, newState, oldState) {
	for (var key in group) {
		if (!changed[key]) continue;

		var newValue = newState[key];
		var oldValue = oldState[key];

		var callbacks = group[key];
		if (!callbacks) continue;

		for (var i = 0; i < callbacks.length; i += 1) {
			var callback = callbacks[i];
			if (callback.__calling) continue;

			callback.__calling = true;
			callback.call(component, newValue, oldValue);
			callback.__calling = false;
		}
	}
}

function fire(eventName, data) {
	var handlers =
		eventName in this._handlers && this._handlers[eventName].slice();
	if (!handlers) return;

	for (var i = 0; i < handlers.length; i += 1) {
		handlers[i].call(this, data);
	}
}

function get(key) {
	return key ? this._state[key] : this._state;
}

function init(component, options) {
	component.options = options;

	component._observers = { pre: blankObject(), post: blankObject() };
	component._handlers = blankObject();
	component._root = options._root || component;
	component._yield = options._yield;
	component._bind = options._bind;
}

function observe(key, callback, options) {
	var group = options && options.defer
		? this._observers.post
		: this._observers.pre;

	(group[key] || (group[key] = [])).push(callback);

	if (!options || options.init !== false) {
		callback.__calling = true;
		callback.call(this, this._state[key]);
		callback.__calling = false;
	}

	return {
		cancel: function() {
			var index = group[key].indexOf(callback);
			if (~index) group[key].splice(index, 1);
		}
	};
}

function on(eventName, handler) {
	if (eventName === 'teardown') return this.on('destroy', handler);

	var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
	handlers.push(handler);

	return {
		cancel: function() {
			var index = handlers.indexOf(handler);
			if (~index) handlers.splice(index, 1);
		}
	};
}

function set(newState) {
	this._set(assign({}, newState));
	if (this._root._lock) return;
	this._root._lock = true;
	callAll(this._root._beforecreate);
	callAll(this._root._oncreate);
	callAll(this._root._aftercreate);
	this._root._lock = false;
}

function _set(newState) {
	var oldState = this._state,
		changed = {},
		dirty = false;

	for (var key in newState) {
		if (differs(newState[key], oldState[key])) changed[key] = dirty = true;
	}
	if (!dirty) return;

	this._state = assign({}, oldState, newState);
	this._recompute(changed, this._state);
	if (this._bind) this._bind(changed, this._state);
	dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
	this._fragment.p(changed, this._state);
	dispatchObservers(this, this._observers.post, changed, this._state, oldState);
}

function callAll(fns) {
	while (fns && fns.length) fns.pop()();
}

function _mount(target, anchor) {
	this._fragment.m(target, anchor);
}

function _unmount() {
	this._fragment.u();
}

var proto = {
	destroy: destroy,
	get: get,
	fire: fire,
	observe: observe,
	on: on,
	set: set,
	teardown: destroy,
	_recompute: noop,
	_set: _set,
	_mount: _mount,
	_unmount: _unmount
};

/* src/Router.html generated by Svelte v1.40.1 */
function data$1() {
  return {
    routes: {},
    notFound: false,
    includeQueryParameters: true,
    activePath: '',
    activeComponent: {}
  }
}

var methods = {
  getURLParts: function () {
    var hashparts = (window.location.hash.slice(1) || '/').split('?');
  
    var path = hashparts[0];
    var query = {};
    if (hashparts[1]) {
      query = JSON.parse('{"' + decodeURI(hashparts[1])
                  .replace(/"/g, '\\"')
                  .replace(/&/g, '","')
                  .replace(/=/g, '":"') + '"}');
    }
    return { path, query }
  },
  route: function () {
    var urlparts = this.getURLParts();
  
    // match a route
    var routes = this.get('routes');
    var route = routes[urlparts.path];
  
    // destroy the current view
    var active = this.get('activeComponent');
    if (active.destroy) active.destroy();

    // when no matching route is found, set notFound message and return
    if (!route) {
      this.set({
        activeComponent: {},
        activePath: urlparts.path,
        notFound: true
      });
      return
    }

    // set current view to the component defined by the route
    var data = route[1] || {};
    if (this.get('includeQueryParameters')) {
      for (var key in urlparts.query) {
        if (urlparts.query.hasOwnProperty(key)) {
          data[key] = urlparts.query[key];
        }
      }
    }
    this.set({
      activeComponent: new route[0]({
        target: this.refs.view,
        data: data
      }),
      activePath: urlparts.path,
      notFound: false
    });
  }
};

function oncreate() {
  this.route();
}

function create_main_fragment$1(state, component) {
	var text, div, text_1, if_block_anchor;

	function onwindowhashchange(event) {
		component.route();
	}
	window.addEventListener("hashchange", onwindowhashchange);

	var if_block = (state.notFound) && create_if_block(state, component);

	return {
		c: function create() {
			text = createText("\n\n");
			div = createElement("div");
			text_1 = createText("\n\n");
			if (if_block) if_block.c();
			if_block_anchor = createComment();
		},

		m: function mount(target, anchor) {
			insertNode(text, target, anchor);
			insertNode(div, target, anchor);
			component.refs.view = div;
			insertNode(text_1, target, anchor);
			if (if_block) if_block.m(target, anchor);
			insertNode(if_block_anchor, target, anchor);
		},

		p: function update(changed, state) {
			if (state.notFound) {
				if (if_block) {
					if_block.p(changed, state);
				} else {
					if_block = create_if_block(state, component);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.u();
				if_block.d();
				if_block = null;
			}
		},

		u: function unmount() {
			detachNode(text);
			detachNode(div);
			detachNode(text_1);
			if (if_block) if_block.u();
			detachNode(if_block_anchor);
		},

		d: function destroy$$1() {
			window.removeEventListener("hashchange", onwindowhashchange);

			if (component.refs.view === div) component.refs.view = null;
			if (if_block) if_block.d();
		}
	};
}

// (5:0) {{ #if notFound }}
function create_if_block(state, component) {
	var slot_content_default = component._slotted.default, slot_content_default_before, slot_content_default_after, p, text, text_1, text_2;

	return {
		c: function create() {
			if (!slot_content_default) {
				p = createElement("p");
				text = createText("Route ");
				text_1 = createText(state.activePath);
				text_2 = createText(" Not Found");
			}
			this.h();
		},

		h: function hydrate() {
			if (!slot_content_default) {
				p.className = "fallback";
			}
		},

		m: function mount(target, anchor) {
			if (!slot_content_default) {
				insertNode(p, target, anchor);
				appendNode(text, p);
				appendNode(text_1, p);
				appendNode(text_2, p);
			}

			if (slot_content_default) {
				insertNode(slot_content_default_before || (slot_content_default_before = createComment()), target, anchor);
				insertNode(slot_content_default, target, anchor);
				insertNode(slot_content_default_after || (slot_content_default_after = createComment()), target, anchor);
			}
		},

		p: function update(changed, state) {
			if (changed.activePath) {
				text_1.data = state.activePath;
			}
		},

		u: function unmount() {
			if (!slot_content_default) {
				detachNode(p);
			}

			if (slot_content_default) {
				reinsertBetween(slot_content_default_before, slot_content_default_after, slot_content_default);
				detachNode(slot_content_default_before);
				detachNode(slot_content_default_after);
			}
		},

		d: noop
	};
}

function Router(options) {
	init(this, options);
	this.refs = {};
	this._state = assign(data$1(), options.data);

	this._slotted = options.slots || {};

	var _oncreate = oncreate.bind(this);

	if (!options._root) {
		this._oncreate = [_oncreate];
	} else {
	 	this._root._oncreate.push(_oncreate);
	 }

	this.slots = {};

	this._fragment = create_main_fragment$1(this._state, this);

	if (options.target) {
		this._fragment.c();
		this._fragment.m(options.target, options.anchor || null);

		callAll(this._oncreate);
	}
}

assign(Router.prototype, methods, proto);

/* src/example/Home.html generated by Svelte v1.40.1 */
function create_main_fragment$2(state, component) {
	var div;

	return {
		c: function create() {
			div = createElement("div");
			div.textContent = "Home sweet home...";
		},

		m: function mount(target, anchor) {
			insertNode(div, target, anchor);
		},

		p: noop,

		u: function unmount() {
			detachNode(div);
		},

		d: noop
	};
}

function Home(options) {
	init(this, options);
	this._state = options.data || {};

	this._fragment = create_main_fragment$2(this._state, this);

	if (options.target) {
		this._fragment.c();
		this._fragment.m(options.target, options.anchor || null);
	}
}

assign(Home.prototype, proto);

/* src/example/Contact.html generated by Svelte v1.40.1 */
function create_main_fragment$3(state, component) {
	var div;

	return {
		c: function create() {
			div = createElement("div");
			div.textContent = "Contact...";
		},

		m: function mount(target, anchor) {
			insertNode(div, target, anchor);
		},

		p: noop,

		u: function unmount() {
			detachNode(div);
		},

		d: noop
	};
}

function Contact(options) {
	init(this, options);
	this._state = options.data || {};

	this._fragment = create_main_fragment$3(this._state, this);

	if (options.target) {
		this._fragment.c();
		this._fragment.m(options.target, options.anchor || null);
	}
}

assign(Contact.prototype, proto);

/* src/example/Example.html generated by Svelte v1.40.1 */
function data() {
  return {
    routes: {
      '/': [Home, {message: 'from "/" path'}],
      '/home': [Home, {message: 'from "/home" path'}],
      '/contact': [Contact]
    }
  }
}

function create_main_fragment(state, component) {
	var a, text_1, a_1, text_3, a_2, text_5, div;

	var router = new Router({
		_root: component._root,
		slots: { default: createFragment() },
		data: { routes: state.routes }
	});

	return {
		c: function create() {
			a = createElement("a");
			a.textContent = "Home";
			text_1 = createText("\n");
			a_1 = createElement("a");
			a_1.textContent = "Contact";
			text_3 = createText("\n");
			a_2 = createElement("a");
			a_2.textContent = "Does not exist";
			text_5 = createText("\n\n");
			div = createElement("div");
			div.textContent = "Houston, we have a problem! This page was not found.";
			router._fragment.c();
			this.h();
		},

		h: function hydrate() {
			a.href = "#/home";
			a_1.href = "#/contact";
			a_2.href = "#/notfound";
			div.className = "error";
		},

		m: function mount(target, anchor) {
			insertNode(a, target, anchor);
			insertNode(text_1, target, anchor);
			insertNode(a_1, target, anchor);
			insertNode(text_3, target, anchor);
			insertNode(a_2, target, anchor);
			insertNode(text_5, target, anchor);
			appendNode(div, router._slotted.default);
			router._mount(target, anchor);
		},

		p: function update(changed, state) {
			var router_changes = {};
			if (changed.routes) router_changes.routes = state.routes;
			router._set( router_changes );
		},

		u: function unmount() {
			detachNode(a);
			detachNode(text_1);
			detachNode(a_1);
			detachNode(text_3);
			detachNode(a_2);
			detachNode(text_5);
			router._unmount();
		},

		d: function destroy$$1() {
			router.destroy(false);
		}
	};
}

function Example(options) {
	init(this, options);
	this._state = assign(data(), options.data);

	if (!options._root) {
		this._oncreate = [];
		this._beforecreate = [];
		this._aftercreate = [];
	}

	this._fragment = create_main_fragment(this._state, this);

	if (options.target) {
		this._fragment.c();
		this._fragment.m(options.target, options.anchor || null);

		this._lock = true;
		callAll(this._beforecreate);
		callAll(this._oncreate);
		callAll(this._aftercreate);
		this._lock = false;
	}
}

assign(Example.prototype, proto);

return Example;

}());
